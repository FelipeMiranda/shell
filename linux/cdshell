#!/bin/bash

source ~/.export
source ~/shell/colors.sh

if [ "$1" != "-h" ]; then
	#Para a funcoesZZ nao mostrar o help qdo usa o -h executa nela tmb."
	source /opt/funcoeszz/funcoeszz
fi

# Exibe versão do CDSHELL instalada.
function exibe_versao_cdshell(){
	DATA=`cat $CDSHELL/backup/data_ultima_instalacao.txt`
	echo -en "\n$DATA"
}

# Exibe a versão Git do seu repositório local
function exibe_versao_git_local_version(){
	V=`git rev-list HEAD | wc -l`
	VERSION=`echo "scale=2; $V/100" | bc`

	if [ $V -eq 0 ]; then 
			echo -en "Versão do repo local: $red $VERSION (Não existe repo aqui) \n"
		else 
			echo -en "Versão do repo local: $green $VERSION \n"
	fi
}

# Assitir a versão
function assistir_versao {
	ZERO=''
	VAR=''
	VAR=$1
	begin=$(date +%s)
	echo -en " Exibindo continuamente...Pressione $green 'q' $normal para sair!"
	while true; do
	   now=$(date +%s)
	   diff=$(($now - $begin))
	   mins=$(($diff / 60))
	   secs=$(($diff % 60))
	   hours=$(($diff / 3600))
	   # \r  is a "carriage return" - returns cursor to start of line
	   # with \33[2K we clear the current line
	   exibe_versao_cdshell
	   printf "\33[2K____________________________\nTempo de execução:  %02d:%02d:%02d\n $red (q) $normal -> sair" $hours $mins $secs
	   if [ ! $VAR != '' ] ; then
		sleep 1 
	   else
		sleep $1 
	   fi

	   #like a tput reset   (Limpar tela)
	   echo -e '\0033\0143'

	   # -n 1 to get one character at a time, -t 0.1 to set a timeout 
	   read -n 1 -t 0.1 input                  # so read doesn't hang
	   if [[ $input = "q" ]] || [[ $input = "Q" ]] 
	   then
		  echo # to get a newline after quitting
		  break
	   fi
	done
}
function resetar_e_instalar_ultima_versao(){
	cdshell
	git checkout -f
	cdshell install
}
function desinstalar() {

	cd ~
	$del="rm -rf"
	$del .cdshell_req_installed 
	$del shell
	$del .vimrc
	$del .screenrc
	$del 

	echo -en "\n $red Por enquanto nao recupera os arquivos originais da primeira instalacao $normal \n"

}

case $1 in

	# adicionar MENSANGES ao cdshell TODOLIST
	"-a"|"--add") 
   					if [ -n "$1" ]; then
						echo "$1" >> $CDSHELL_VAR
						echo -en "\n$green Tarefa adicionada. \n"
					fi
    ;;

	# Instalar enviando o diretorio local (PWD) para instalacao como parametro e ja voltar no mesmo lugar que chamou.
    "install" | "-i" | "--install") SAVEDIR=$PWD ; cd $CDSHELL ; . install.sh $SAVEDIR
    ;;

    "-v") echo -en "Versão do comando cdshell: 1.0.0 \n"
	 echo -en "Versão do Pacote CDSHELL: $green `cat $CDSHELL/backup/versao_ultima_instalacao.txt`\n $normal"
    ;;

	"-c"|"--colors") zzcores 
   					cat $HOME/colors.sh 
    ;;

    "-e"|"--edit")  
   					CDSHELL_FILE_DATE=$(stat -c %y $CDSHELL/linux/cdshell)
  					vim $CDSHELL/linux/cdshell || vi $CDSHELL/linux/cdshell
					CDSHELL_FILE_DATE_POS_VI=$(stat -c %y $CDSHELL/linux/cdshell)
					# Se houver modificao no arquivo cdsell avisar para fazer o commit
					if [ $(echo "$CDSHELL_FILE_DATE" | md5sum | cut -f1 -d' ') != $(echo "$CDSHELL_FILE_DATE_POS_VI" |md5sum | cut -f1 -d' ' ) ]; then
						echo -en "\n Arquivo do$alert CDSHELL$normal atualizado com$green sucesso! \n\n\t Não esqueça de fazer o$atention git commit(®)$normal $green(s)/(y)$normal para $green SIM$normal\n"
						read -n 1 RESPOSTA
						if [ "$RESPOSTA" == "y" ] || [ "$RESPOSTA" == "s" ]; then
								cd $CDSHELL/linux  
								git add .
								git commit -m "Salvando alterações no arquivo cdshell"    
								cd - 2>&1 /dev/null
						fi
					else
						echo -en "\n\n\n Arquivo cdshell$green sem modificações$normal\n"
					fi
    ;;

    "-h"|"--help") 
   					echo -en "\n Use cdshell para facilitar as modificações e teste de customizações de seu environment."
					echo 
					echo -en "\n -a\t\t\t Adicionar tarefas à lista."
					echo -en "\n -c\t\t\t Mostrar o help."
					echo -en "\n -e\t\t\t Editar o arquivo cdshell."
					echo -en "\n -h\t\t\t Mostrar o help."
					echo -en "\n -g\t\t\t Mostrar a versão do seu resitório git atual."
					echo -en "\n -i\t\t\t Instalar o cdshell."
					echo -en "\n -v\t\t\t Exibe a versão do cdshell."
					echo -en "\n -w\t\t\t Assistir versão (watch)."
					echo
					echo
					exit 0;
	;;

    "-w") assistir_versao $2
	;;

    "reset"|"--reset"|"-r") resetar_e_instalar_ultima_versao
	;;

	"-u"|"--uninstall"|"-U") desinstalar
	;;

    "-v") exibe_versao 
	if [ ! -z $1  ]; then
		echo -en "O comando $red $1 $normal não existe."
	fi
    ;;

    "-g"|"--git"|--git-version) exibe_versao_git_local_version
    ;;
	
    "" ) exibe_versao_cdshell
    ;;
   
    * )echo -en "O comando $red $1 $normal não existe.\n"
    ;;
esac



