#!/bin/bash


###########################################
#									      #
#	Sistema de Lista de Tarefas: cdshell  #
#   								      #
###########################################

# Configs
source ~/.export
source ~/colors.sh

SPLASH_SCREEN_FILE=$CDSHELL_VAR/tarefas_bashrc_splashscreen.txt
SAVEDIR=$PWD


# Colocando isso para não rodar o source, pois ta chamando o -h dele, -e tmb, VER PRA TIRAR ESSA GAMBI
if [ "$1" == "-c" ] || [ "$1" == "--colors" ] ; then
	#Para a funcoesZZ nao mostrar o help qdo usa o -h executa nela tmb."
	source /opt/funcoeszz/funcoeszz
fi

# Exibe versão do CDSHELL instalada.
function exibe_versao_cdshell(){
	DATA=`cat $CDSHELL/backup/data_ultima_instalacao.txt`
	echo -en "\n$DATA"
	echo -en "\n\n TAREFAS_SHOWED_AT_TIME=$WHITE $TAREFAS_SHOWED_AT_TIME $normal\n\n"
	echo -en " Exibido à $(( $(date +%s) - $TAREFAS_SHOWED_AT_TIME )) segundos atrás\n"
	if [ -d .git ]; then git config credential.helper store; git config --global push.default simple; fi
	echo -en "Aproveitando para setar $alert git config credential.helper store$normal \n"
	echo -en "Aproveitando para setar $alert git config --global push.default simple $normal \n"
}

# Exibe a versão Git do seu repositório local
function exibe_versao_git_local_version(){
	V=`git rev-list HEAD | wc -l`
	VERSION=`echo "scale=2; $V/100" | bc`

	if [ $V -eq 0 ]; then 
			echo -en "Versão do repo local: $red $VERSION (Não existe repo aqui) \n"
		else 
			echo -en "Versão do repo local: $green $VERSION \n"
	fi
}

# retorna 0 caso caminho exista.
function if_exist(){ if [ -e $1 ]; then return 0 ; else return 1 ; fi }

# Assitir a versão
function assistir_versao {
	ZERO=''
	VAR=''
	VAR=$1
	begin=$(date +%s)
	echo -en " Exibindo continuamente...Pressione $green 'q' $normal para sair!"
	while true; do
	   now=$(date +%s)
	   diff=$(($now - $begin))
	   mins=$(($diff / 60))
	   secs=$(($diff % 60))
	   hours=$(($diff / 3600))
	   # \r  is a "carriage return" - returns cursor to start of line
	   # with \33[2K we clear the current line
	   exibe_versao_cdshell
	   printf "\33[2K____________________________\nTempo de execução:  %02d:%02d:%02d\n $red (q) $normal -> sair" $hours $mins $secs
	   if [ ! $VAR != '' ] ; then
		sleep 1 
	   else
		sleep $1 
	   fi

	   #like a tput reset   (Limpar tela)
	   echo -e '\0033\0143'

	   # -n 1 to get one character at a time, -t 0.1 to set a timeout 
	   read -n 1 -t 0.1 input                  # so read doesn't hang
	   if [[ $input = "q" ]] || [[ $input = "Q" ]] 
	   then
		  echo # to get a newline after quitting
		  break
	   fi
	done
}



# Zera tudo e reinstala
function resetar_e_instalar_ultima_versao(){
	cdshell
	git checkout -f
	cdshell install
}

# Desinstalar
function desinstalar() {

	DIRETORIOS="/.cdshell_req_installed ~/.vimrc ~/.screenrc ~/.cdshell ~/skeleton $CDSHELL"
	echo -en "\n Vamos apagar os seguintes diretórios, esteja ciente...kkk!\n\n$WHITE $DIRETORIOS"
	read -n1
	cd ~
	del="rm -rf"
	$del ~/.cdshell_req_installed 
	$del ~/.vimrc
	$del ~/.screenrc
	$del ~/.cdshell
	$del ~/skeleton
	$del $CDSHELL
	echo -en "\n $green Desinstalado com SUCESSO!\n\n\t $red Por enquanto não recupera os arquivos originais da primeira instalação.     $WHITE :-|  $normal \n"
}

function install (){
	cd $CDSHELL 
	$CDSHELL/$install.sh $SAVEDIR
}


# Escreve o JSON das tarefas e gera a SPLASH_SCREEN
function atualizaJSON() {
						JSON=$*
						echo $JSON > $CDSHELL_VAR/cdshell_tarefas.json
						echo $(( $NEXT_ID )) > $CDSHELL_VAR/cdshell_tarefas.next_id
						jq .item[].id $CDSHELL_VAR/cdshell_tarefas.json > /tmp/A
						jq .item[].tarefa.priority $CDSHELL_VAR/cdshell_tarefas.json > /tmp/B
						jq .item[].tarefa.text $CDSHELL_VAR/cdshell_tarefas.json > /tmp/C
						#DEBUG echo -en "$alert O CONTEUDO DE B é:"
						#DEBUG cat /tmp/B
						#DEBUG echo -en "$normal"
						for ((c=$(wc -l /tmp/B | cut -d " " -f1);$c>1;c=$c-1)) do
							echo "\e[0m" >> /tmp/D
						done
						cat /tmp/B | awk '
							{
								if ($0 == 1) {print "\\e[0;0m"}
								if ($0 == 2) {print "\\e[33m"}
								if ($0 == 3) {print "\\e[31m"}
							}' > /tmp/B2
						sed -i 's/"//g' /tmp/C
						paste /tmp/A /tmp/B2 /tmp/C /tmp/D > $CDSHELL_VAR/tarefas_usedby_bashrc.txt
						#
						# DEBUG REMOVENDO isso abaixo, pois parece q funcionou o apagar todos e quando começa de novo, comeca certinho.
						#rm -rf /tmp/A /tmp/B /tmp/B2 /tmp/C /tmp/D
						#
						return 0
}


# funcao TestCheckList
function TestCheckList(){
	EXIT_CODE=0
	CONT=0
	FILES_NEED_EXISTS="
		$CDSHELL $CDSHELL/backup $CDSHELL_VAR $HOME/.bashrc $HOME/.alias $HOME/.export $HOME/.vimrc $HOME/.screenrc $HOME/.toprc \
	   	$CDSHELL/backup/data_ultima_instalacao.txt 	$CDSHELL/backup/versao_ultima_instalacao.txt
	   	$HOME/.F11.cmd
				  "
	for FILE in $FILES_NEED_EXISTS; do 
		echo -en "\n $yellow $CONT ... $green $FILE $normal" 
		if_exist $FILE || EXIT_CODE=$? 
		((CONT++))
		echo $CONT
	done
	return $EXIT_CODE
}

# Run - Tests
function runTests(){
	EXIT_CODE=0
	CONT=0
	echo -en "\n ### Running All Tests ### \n"
	
	# Rodando os testes de cima.( para nao ficar repetitivo) 
    TestCheckList	

	
	# Simule falha, então código de retorno > 0
	#EXIT_CODE=11
	return $EXIT_CODE
}


# Run - All Tests
function runTestTotal(){
	EXIT_CODE=0
	CONT=0
	echo -en "\n$alert $### Test Total ###a$normal\n"
   
	# Rodando os testes de cima.( para nao ficar repetitivo) 
    TestCheckList	

    cd $CDSHELL
	head -20 /dev/urandom | cksum > $CDSHELL/install/testTotal.random
	git add $CDSHELL/install/testTotal.random
	git commit $CDSHELL/install/testTotal.random -m "Running TestTotal"
	git push
	EXIT_CODE=$?
	return $EXIT_CODE
}



#############################################################################################
#                                          MAIN                                             #
#############################################################################################

case $1 in

	# adicionar MENSANGES ao cdshell TODOLIST
	"-a"|"--add")	
				if [ -n "$1" ]; then
					
					
					NEXT_ID=$(cat $CDSHELL_VAR/cdshell_tarefas.next_id)
					NEXT_ID=$(( $NEXT_ID + 1 ))
					TEXTO=$( echo $* | sed 's/\-a //g' )
					echo TEXTO=$TEXTO
					JSON=`jq ".item += [{\"id\":$NEXT_ID,\"tarefa\":{\"priority\": 1, \"text\":\"$TEXTO\"}}]" $CDSHELL_VAR/cdshell_tarefas.json`
					#atualizando o BANCO DE DADOS com o novo registro, devia testar antes.
					atualizaJSON $JSON
					echo -en "\n$green Tarefa $NEXT_ID adicionada. \n"
						
						if [ $NEXT_ID -eq 1 ]; then
						
							-d 0
						fi
	
				fi
    ;;

	# Adicionando tarefas PRIORITY = 2
	"-a2")		if [ -n "$1" ]; then
					NEXT_ID=$(cat $CDSHELL_VAR/cdshell_tarefas.next_id)
					NEXT_ID=$(( $NEXT_ID + 1 ))
					TEXTO=$( echo $* | sed 's/\-a3 //g' )
					echo TEXTO=$TEXTO
					JSON=`jq ".item += [{\"id\":$NEXT_ID,\"tarefa\":{\"priority\": 2, \"text\":\"$TEXTO\"}}]" $CDSHELL_VAR/cdshell_tarefas.json`
					atualizaJSON $JSON
					echo -en "\n$green Tarefa $NEXT_ID adicionada. \n"
				fi
    ;;

	# Adicionando tarefas PRIORITY = 3
	"-a3")		if [ -n "$1" ]; then
					NEXT_ID=$(cat $CDSHELL_VAR/cdshell_tarefas.next_id)
					NEXT_ID=$(( $NEXT_ID + 1 ))
					TEXTO=$( echo $* | sed 's/\-a3 //g' )
					echo TEXTO=$TEXTO
					JSON=`jq ".item += [{\"id\":$NEXT_ID,\"tarefa\":{\"priority\": 3, \"text\":\"$TEXTO\"}}]" $CDSHELL_VAR/cdshell_tarefas.json`
					atualizaJSON $JSON
					echo -en "\n$green Tarefa $NEXT_ID adicionada. \n"
				fi
    ;;

	# Exibir cores e variáveis mode ENCAPETATION=ON
	"-c"|"--colors") 
					zzcores 
   					cat $HOME/colors.sh
    ;;

	# Apagando tarefas por ID
	"-d"|"--delete")
					if [ -n "$2" ]; then
						
						NEXT_ID=$(cat $CDSHELL_VAR/cdshell_tarefas.next_id)
						ID=$( echo $2 | sed 's/\-a //g' )
						echo Apagando Tarefa ID=$ID
						JSON=$(jq "del(.[][] | select( .id == $ID))" $CDSHELL_VAR/cdshell_tarefas.json)
						atualizaJSON $JSON
						echo -en "\n$green Tarefa $2 apagada. \n"

					else
						echo -en "\n $red Nao foi passada o ID para apagar$normal\n"
						echo -en "\n $yellow Use -d <ID> $normal\n"
						NEXT_ID=$(cat $CDSHELL_VAR/cdshell_tarefas.next_id)
						JSON=$(jq ". " $CDSHELL_VAR/cdshell_tarefas.json)
						atualizaJSON $JSON
						exit 1
					fi
    ;;

	# Editar arquivo cdshell.
    "-e"|"--edit")  
   					CDSHELL_FILE_DATE=$(stat -c %y $CDSHELL/linux/cdshell)
  					vim $CDSHELL/linux/cdshell || vi $CDSHELL/linux/cdshell
					CDSHELL_FILE_DATE_POS_VI=$(stat -c %y $CDSHELL/linux/cdshell)
					# Se houver modificao no arquivo cdsell avisar para fazer o commit
					if [ $(echo "$CDSHELL_FILE_DATE" | md5sum | cut -f1 -d' ') != $(echo "$CDSHELL_FILE_DATE_POS_VI" |md5sum | cut -f1 -d' ' ) ]; then
						echo -en "\n Arquivo ${yellow}${CDSHELLL}/linux/cdshell$normal atualizado com ${green}SUCESSO!${normal}\n\n\t Não esqueça de fazer ${atention}git push ®$normal.\n\n * Deseja fazer? $green s/y $normal para $green SIM -> $normal"  
						read -n 1 RESPOSTA     
						if [ "$RESPOSTA" == "y" ] || [ "$RESPOSTA" == "s" ] ; then
								cd $CDSHELL/linux 
								git add .
								git commit -m "Salvando alterações no arquivo cdshell"    
								cd - 2>&1 /dev/null
						else 
							echo -en "\n Arquivo alterado mas to saindo $red SEM COMMIT $normal nada\n\n"
						fi
					else
						echo -en "\n\n\n Arquivo cdshell$green sem modificações$normal\n\n"
					fi
    ;;


	# Instalar enviando o diretorio local (PWD) para instalacao como parametro e ja voltar no mesmo lugar que chamou.
    "-log" | "--log" | "--last-install-log") 
    	log
	;;


	# Instalar enviando o diretorio local (PWD) para instalacao como parametro e ja voltar no mesmo lugar que chamou.
    "-i" | "--install" | "install") 
		install
    ;;

	#Listar tarefas atuais formato JSON.
    "-l") jq -r '.item[] ' $CDSHELL_VAR/cdshell_tarefas.json
    ;;

 
 	# HELP
    "-h"|"--help") 
   					echo -en "\n Use cdshell para facilitar as modificações e teste de customizações de seu environment."
					echo 
					echo -en "\n -a\t\t\t Adicionar tarefas à lista."
					echo -en "\n -c\t\t\t Mostrar o help."
					echo -en "\n -e\t\t\t Editar o arquivo cdshell."
					echo -en "\n -h\t\t\t Mostrar o help."
					echo -en "\n -g\t\t\t Mostrar a versão do seu resitório git atual."
					echo -en "\n -i\t\t\t Instalar o cdshell."
					echo -en "\n -l\t\t\t Listar tarefas."
					echo -en "\n -t\t\t\t Teste de instalação."
					echo -en "\n -v\t\t\t Exibe a versão do cdshell."
					echo -en "\n -w\t\t\t Assistir versão (watch)."
					echo
					exit 0;
	;;

	# Resetar o cdshell
    "-r"|"--reset") resetar_e_instalar_ultima_versao
	;;

	# Teste de instalação
    "-t"|"--test") 
								EXIT_CODE=""
								runTests
								EXIT_CODE=$?
								if [ $EXIT_CODE == 0 ]; then
									echo -en "\n Testes realizados com $green sucesso.$normal\n"
								else
									echo -en "... deu $red erro $normal, o código de saída é EXIT_CODE =$red $EXIT_CODE $normal .\n\n"
								fi
								exit $EXIT_CODE
    ;;

	# Teste Total(-tt) -> teste com versionamento e commit
    "--test-total") 
								EXIT_CODE=""
								runTestTotal
								EXIT_CODE=$?
								if [ $EXIT_CODE == 0 ]; then
									echo -en "\n Testes realizados com $green sucesso.$normal\n"
								else
									echo -en "... deu $red erro $normal, o código de saída é EXIT_CODE =$red $EXIT_CODE $normal .\n\n"
								fi
								exit $EXIT_CODE
    ;;

	#Desinstalar tudo inclusive o repositório, cuidado perde as modificacoes atuais.
	"-u"|"--uninstall"|"-U") 
								echo -en "\n $atention Tem certeza? $WHITE UNINSTALL ...\n\n\t $normal Digite s/S para $green SIM -> $WHITE"
								read -n 1 RESPOSTA
								echo -en "$normal\n"
								if [ "$RESPOSTA" == 's' ] || [  "$RESPOSTA" == 'S' ]; then
									echo -en " Iniciando a desinstalação... "
									desinstalar
									echo -en "\n\n Desinstalação concluída com SUCESSO!\n\n "
									exit 0
								else
									echo -en "\n\n $red OK CANCELADO!\n\n "
									exit 1
								fi

	;;

	# Uninstall and install
    "-ui")
			cdshell -u
			# Se cancelado, saia.
			if [ $? == 1 ]; then exit 1 ; fi
			cd
			git clone git@github.com:quirinobytes/shell.git 
			cd shell
			./install.sh
    ;;

	# Mostrar a versão do arquivo cdshell, NAO CDSHELL
    "--version") echo -en "Versão do arquivo cdshell: v_1.0.0 \n"
	 echo -en "Versão do Pacote CDSHELL: $green `cat $CDSHELL/backup/versao_ultima_instalacao.txt`\n $normal"
    ;;

	# Exibe versao atual
    "-v") exibe_versao_cdshell
	if [ ! -z $1  ]; then
		echo -en "O comando $red $1 $normal não existe."
	fi
    ;;

	# Exibe versao atual
    "-V") cat $CDSHELL/backup/versao_ultima_instalacao.txt
    ;;


	# Mostrar versao GIT do diretório atual
    "-g"|"--git"|--git-version) exibe_versao_git_local_version
    ;;

	# Watch (cat arquivo_de_versao)
    "-w") assistir_versao $2
	;;

    "-wi") assistir_versao $2
	install
	;;



	# Exibe a versao do CDSHELL (igual -v)
    "" ) exibe_versao_cdshell
    ;;
   
   	# Mensagem caso nao encontre a opção desejada.
    * )echo -en "O comando $red $1 $normal não existe.\n"
    ;;
esac



